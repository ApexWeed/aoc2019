using System;
using System.Linq;

namespace Day5
{
    class Program
    {
        static void Main(string[] args)
        {
            var input = new[] {3,225,1,225,6,6,1100,1,238,225,104,0,1102,79,14,225,1101,17,42,225,2,74,69,224,1001,224,-5733,224,4,224,1002,223,8,223,101,4,224,224,1,223,224,223,1002,191,83,224,1001,224,-2407,224,4,224,102,8,223,223,101,2,224,224,1,223,224,223,1101,18,64,225,1102,63,22,225,1101,31,91,225,1001,65,26,224,101,-44,224,224,4,224,102,8,223,223,101,3,224,224,1,224,223,223,101,78,13,224,101,-157,224,224,4,224,1002,223,8,223,1001,224,3,224,1,224,223,223,102,87,187,224,101,-4698,224,224,4,224,102,8,223,223,1001,224,4,224,1,223,224,223,1102,79,85,224,101,-6715,224,224,4,224,1002,223,8,223,1001,224,2,224,1,224,223,223,1101,43,46,224,101,-89,224,224,4,224,1002,223,8,223,101,1,224,224,1,223,224,223,1101,54,12,225,1102,29,54,225,1,17,217,224,101,-37,224,224,4,224,102,8,223,223,1001,224,3,224,1,223,224,223,1102,20,53,225,4,223,99,0,0,0,677,0,0,0,0,0,0,0,0,0,0,0,1105,0,99999,1105,227,247,1105,1,99999,1005,227,99999,1005,0,256,1105,1,99999,1106,227,99999,1106,0,265,1105,1,99999,1006,0,99999,1006,227,274,1105,1,99999,1105,1,280,1105,1,99999,1,225,225,225,1101,294,0,0,105,1,0,1105,1,99999,1106,0,300,1105,1,99999,1,225,225,225,1101,314,0,0,106,0,0,1105,1,99999,107,226,226,224,1002,223,2,223,1006,224,329,101,1,223,223,1108,677,226,224,1002,223,2,223,1006,224,344,101,1,223,223,7,677,226,224,102,2,223,223,1006,224,359,101,1,223,223,108,226,226,224,1002,223,2,223,1005,224,374,101,1,223,223,8,226,677,224,1002,223,2,223,1006,224,389,101,1,223,223,1108,226,226,224,102,2,223,223,1006,224,404,101,1,223,223,1007,677,677,224,1002,223,2,223,1006,224,419,101,1,223,223,8,677,677,224,1002,223,2,223,1005,224,434,1001,223,1,223,1008,226,226,224,102,2,223,223,1005,224,449,1001,223,1,223,1008,226,677,224,102,2,223,223,1006,224,464,101,1,223,223,1107,677,677,224,102,2,223,223,1006,224,479,101,1,223,223,107,677,677,224,1002,223,2,223,1005,224,494,1001,223,1,223,1107,226,677,224,1002,223,2,223,1005,224,509,101,1,223,223,1108,226,677,224,102,2,223,223,1006,224,524,101,1,223,223,7,226,226,224,1002,223,2,223,1005,224,539,101,1,223,223,108,677,677,224,1002,223,2,223,1005,224,554,101,1,223,223,8,677,226,224,1002,223,2,223,1005,224,569,1001,223,1,223,1008,677,677,224,102,2,223,223,1006,224,584,101,1,223,223,107,226,677,224,102,2,223,223,1005,224,599,1001,223,1,223,7,226,677,224,102,2,223,223,1005,224,614,101,1,223,223,1007,226,226,224,1002,223,2,223,1005,224,629,101,1,223,223,1107,677,226,224,1002,223,2,223,1006,224,644,101,1,223,223,108,226,677,224,102,2,223,223,1006,224,659,101,1,223,223,1007,677,226,224,102,2,223,223,1006,224,674,101,1,223,223,4,223,99,226};

            Run(input, new[] {5}, out var diagnostics);
            Console.WriteLine(string.Join(", ", diagnostics));
        }

        private static int Run(int[] program, int[] inputs, out int[] outputs)
        {
            outputs = new int[0];
            for (var i = 0; i < program.Length;)
            {
                var op = program[i] % 100;
                var modes = (program[i] - program[i] % 100).ToString().Reverse().Skip(2).Concat(new [] {'0', '0', '0'}).Select(c => c - '0').ToArray();

                int Arg(int offset) => modes[offset - 1] == 0 ? program[program[i + offset]] : program[i + offset];
                int Val(int offset) => program[i + offset];

                var start = i;
                var action = string.Empty;

                switch (op)
                {
                    case 01:
                    {
                        var arg1 = Arg(1);
                        var arg2 = Arg(2);
                        var dest = Val(3);

                        program[dest] = arg1 + arg2;
                        action = $"{dest:0000} <- {arg1 + arg2}";
                        i += 4;
                        break;
                    }
                    case 02:
                    {
                        var arg1 = Arg(1);
                        var arg2 = Arg(2);
                        var dest = Val(3);

                        program[dest] = arg1 * arg2;
                        action = $"{dest:0000} <- {arg1 * arg2}";
                        i += 4;
                        break;
                    }
                    case 03:
                    {
                        var input = inputs.First();
                        var dest = Val(1);

                        program[dest] = input;
                        inputs = inputs.Skip(1).ToArray();
                        action = $"{dest:0000} <- {input}";
                        i += 2;
                        break;
                    }
                    case 04:
                    {
                        var src = Val(1);
                        var value = Arg(1);

                        outputs = outputs.Append(value).ToArray();
                        action = $"{src:0000} -> {value}";
                        i += 2;
                        break;
                    }
                    case 05:
                    {
                        var arg1 = Arg(1);
                        var dest = Arg(2);

                        if (arg1 != 0)
                        {
                            action = $"! {dest:0000}";
                            i = dest;
                        }
                        else
                        {
                            i += 3;
                        }
                        break;
                    }
                    case 06:
                    {
                        var arg1 = Arg(1);
                        var dest = Arg(2);

                        if (arg1 == 0)
                        {
                            action = $"! {dest:0000}";
                            i = dest;
                        }
                        else
                        {
                            i += 3;
                        }
                        break;
                    }
                    case 07:
                    {
                        var arg1 = Arg(1);
                        var arg2 = Arg(2);
                        var dest = Val(3);

                        if (arg1 < arg2)
                        {
                            action = $"{dest:0000} <- 1";
                            program[dest] = 1;
                        }
                        else
                        {
                            action = $"{dest:0000} <- 0";
                            program[dest] = 0;
                        }

                        i += 4;
                        break;
                    }
                    case 08:
                    {
                        var arg1 = Arg(1);
                        var arg2 = Arg(2);
                        var dest = Val(3);

                        if (arg1 == arg2)
                        {
                            action = $"{dest:0000} <- 1";
                            program[dest] = 1;
                        }
                        else
                        {
                            action = $"{dest:0000} <- 0";
                            program[dest] = 0;
                        }

                        i += 4;
                        break;
                    }
                    case 99:
                    {
                        i = program.Length;
                        action = "break";
                        break;
                    }
                }
                Console.WriteLine($"{start:0000}:{op:00}:{string.Join("", modes.Take(3))} {action}");
            }

            return program[0];
        }
    }
}
